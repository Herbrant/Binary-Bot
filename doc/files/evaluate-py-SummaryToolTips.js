NDSummary.OnToolTipsLoaded("File:evaluate.py",{10:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype10\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def dec_to_binary(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">n</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return binary from decimal number(n).</div></div>",11:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype11\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def dec_to_two(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">n</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return two\'s complement from decimal number(n).</div></div>",12:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype12\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def binary_to_dec(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">n</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return decimal from two\'s complement number.</div></div>",13:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype13\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def normalizelen(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">a,</td></tr><tr><td class=\"PName first last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return (a,b) normalized.</div></div>",14:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype14\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def is_greater(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">a,</td></tr><tr><td class=\"PName first last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return 1 if a &gt; b, return 0 else.</div></div>",15:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype15\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def binary_reverse(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">a</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return reverse binary number.</div></div>",16:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype16\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def binary_sum(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">a,</td></tr><tr><td class=\"PName first last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return a+b.</div></div>",17:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype17\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def binary_sub(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">a,</td></tr><tr><td class=\"PName first last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return a-b.</div></div>",18:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype18\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def binary_multiply(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">a,</td></tr><tr><td class=\"PName first last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return a*b.</div></div>",19:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype19\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def binary_div(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">a,</td></tr><tr><td class=\"PName first last\">b</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return a/b if a &gt;= b, return 0 else.</div></div>",20:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype20\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def is_binary(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">str</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return 1 if str is binary, return 0 else.</div></div>",21:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype21\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def is_name(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">str</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return 1 if str is an operator, return 0 else.</div></div>",22:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype22\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def peek(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">stack</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Return stack[-1] if stack is not empy else return None.</div></div>",23:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype23\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def apply_operator(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">operators,</td></tr><tr><td class=\"PName first last\">values</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Function that append operation result in values stack.</div></div>",24:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype24\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def greater_precedence(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">op1,</td></tr><tr><td class=\"PName first last\">op2</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Function that return precedences operator.</div></div>",25:"<div class=\"NDToolTip TFunction LPython\"><div id=\"NDPrototype25\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">def evaluate(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">expression</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Evaluate expression and return result. (Implementation of shunting-yard algorithm)</div></div>"});